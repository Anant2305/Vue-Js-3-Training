Vue Js with Firebase

IDE - Visual Studio Code

Downloaded Extensions
    -Live Sever
    -Veture
    -Material Design Icon

Projects Created

Introdction
    vue-firbase

Vue Cli
    modal-projects

Examples of uses 
    reaction-timer

********************************************

    You can use Vuejs 2 ways

    using it via Vuejs website: -
        <script src="https://unpkg.com/vue@3"></script>

    Downloading it locally
        npm init vue@latest

To create a vuejs to work you need to create a vue app.js file to keep all the files together and add: -

    const app = Vue.createApp()

You will need to create a mount to be able to add to the website

    app.mount("#app")

Once this has been delcared you are now able to use this in any html page
within a <div></div> tag.
    
    <div id="app" >
    </div>

Anything within this div you can use VueJS code.

You are now able to add templates to the Vue.createApp() for it to be processedin the <div id="app"></div> element
    
    const app = Vue.createApp({
        //data, function
        template: '<h2>I am the template<h2>'
    })

Adding data that is accessible to the webpage
    
    data(){
        return {
            title: 'The Final Empire',
            author: 'Brandon Snaderson',
            age: 45,
        }
    }

within the createApp() object you can add data that can be used in the webpage
    <p>{{ title }} - {{ author }} - {{ age }}</p>


DIRECTIVES

These are Vejs function that will respond to a users action

Like a button click:-

There are 2 ways to create a button response

1 - On the webpage
    <button v-on:click='age++'>increase age by 1</button>
    <button v-on:click='age--'>decrease age by 1</button>

    the v is to say this is a vue command
    the on is the action
    the click the the response when action is done
    
    Vuejs has made it simple to create this by changing v-on to @
    so the above can now be

         <button @click='age++'>increase age by 1</button>
         <button @click='age--'>decrease age by 1</button>
2 - With in the createApp()

    methods: {
        changeTitle() {
            this.title = "New Title Name"
        }
    }

    you can refer to this in the webpage as
        <div @click="changeTitle">Change Book Title</div>

    To make this dynamic you can pass a value to change the book to
        <div @click="changeTitle2('OtherTitle')">Change Book Title</div>
    
    and in the method pass the value as a variable
         methods: {
           changeTitle() {
            this.title = "New Title Name"
           }
         }


Using an if statement

You can use v-if to validate if something should be shown or not
You need to set a value in the data to validate and then check in the website like so

    <div v-if="showBooks"></div>

You can also use this in a button by adding a method to toggle a value to show and hide a button
    in app.js
    data(){
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Snaderson',
            age: 45,
        }
    },
    methods: {
        toggleShowBooks(){
            this.showBooks = !this.showBooks //this will set showBooks toopposite to last clicked value.
        },
    
    in HTML <div id='app'><div> area
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books</span>
        <span  v-else>Show Books</span>
    </button>

Another way to hide and show thing in vuejs is to use v-show
     <div v-show="showBooks">SHOW US VALUE</div>

The way v-if works it removes the whole block and will then inject it back in when to show, but v-show chnges the css to display:block and display:none.

Depending on what you want to do v-if takes longer to switch on and off compared to v-show.
Based on your needs you may want to think about which one to use.

Other Mouse Events

    <!-- Other Mouse Events -->
    <div class="box" @mouseover="handleEvent($event, 5)">mouseover (enter</div>
    <div class="box" @mouseleave="handleEvent">mouseleave</div>
    <div class="box" @dblclick="handleEvent">double click</div>

     handleEvent(e) {
            console.log(e, e.type)
        }
    This will handle mouse specifc actions and return a list of events to vusjs for you to referto and handle.

    You can pass is your own data but must make sure you also send over the event in the first value. ($event).

    You can also delcare the mouse move to return back the position of the mouse int a div.

    <div class="box" @mousemove="handleMouseMove">position - {{ x }} {{ y }}</div>
    data(){
        return {
            x: 0,
            y: 0
        }
    },
    method: {
        handleMouseMove(e){
            this.x = e.offsetX,
            this.y = e.offsetY
        }
    }

Outputting Data

Arrays

WHen you declare an array in the data: -

    data(){
        return {
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss' },
                { title: 'the way of kings', author: 'Brandon Snaderson' },
                { title: 'The Final Empire', author: 'Brandon Snaderson' }
            ]
        }
    },

You can loop through it by using a v-for loop 

    <div v-if="showBooks">
        <ul>
            <li v-for="book in books">
                <h3>{{ book.title }}</h3>
                <p>{{ book.author }}</p>
            </li>
        </ul>
    </div>

This will loop through the books as book and out put the values in title and author.

Attribute Binding

What if you want to create a dynamic data in a an attribute like href.

To use this you need to bo a data binding by using v-bind: and waht to bind with.

    in app.js createApp()
    data(){
        return {
            url: "https://www.bbc.co.uk"
        }
    },

    in Website
    <a v-bind:href="url"> Best website ever</a>
    or
    <a :href="url"> Best website ever</a>

Dynamic Classes

You can change the class name based on a value in the data and using Attribute binding method you can
use in the class adding a class in a data value is what you wnat it to be.

    in app.js createApp() 
     return {
            url: "https://www.bbc.co.uk",
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss', img: 'assets/NameOfWind.jpg', isFav: true },
                { title: 'the way of kings', author: 'Brandon Snaderson', img: 'assets/WayOfKings.jpg', isFav: false },
                { title: 'The Final Empire', author: 'Brandon Snaderson', img: 'assets/finalEmpire.jpg', isFav: true }
            ]
        }

        in website
        <li v-for="book in books" :class="{ fav: book.isFav}">

Thei will add class fav if book.isFav is set to true.

Computed Propertise

This is where you can use the set of array data decalred in createApp(){ data} and filter out any items listed 
under a value you want to filter by,

You need to create a new section called computed in createApp()

    in createApp() data array
     data(){
        return {
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss', img: 'assets/NameOfWind.jpg', isFav: true },
                { title: 'the way of kings', author: 'Brandon Snaderson', img: 'assets/WayOfKings.jpg', isFav: false },
                { title: 'The Final Empire', author: 'Brandon Snaderson', img: 'assets/finalEmpire.jpg', isFav: true }

            ]
        }
    },
    computed: {
        filteredBooks() {
            return this.books.filter((book) =>  book.isFav)
        }
    }

this will filter out any books with isFav as true and return it as anew array to use in website.

    in website
    div v-if="showBooks">
        <ul>
            <li v-for="book in filteredBooks" :class="{ fav: book.isFav}" @click="toggleIsFav(book)">
                <img :src="book.img" :alt="book.title" >
                <h3>{{ book.title }}</h3>
                <p>{{ book.author }}</p>
            </li>
        </ul>
    </div>

*************************************************************

VUE Cli

You can download vue Cli
    npm install -g @vue/cli

This will download all vue clie files needed to create a vue Project

You can now create a new project in the command line:

    vue create modal-project

This will create a new projet called modal-project

It will ask you to set it up using setting for your project.

The new project will create a budle of Files.
    Node_Modules Folder
    Public Folder
    Src Folder
        assets Folder
        Components Folder
        App.vue 
        main.js 
    Other files

App.vue is where we write all the codes to appear in the main.js which will then
appear in index.js. 

The Vuejs is the main file where we add the createApp data, modules & computed information
as we did in the vue-firbase Projects

The vue js is seperated into 3 areas.

    1 - templae - data added that will appear in the webpage 
    2 - script - the place where we return data, methods & computed proceses for the
        template to use
    3 - Style - CSS we want to use for the webpage.

Template References

You can use references to a dom and handle it in the methods area. 
    <template>
        <input type="text" ref="name">
        <button @click="handleClick">click me</button>
    </template>

    methods: {
        handleClick() {
          console.log(this.$refs.name)
          this.$refs.name.classList.add('active')
            this.$refs.name.focus()
        }
      }

This will output anything in the input box and when button clicked will appear
in the console log and amend the dom accordingly.

Multiple Componenets

In the Components folder you can create different files as long as you use a naming convention
like Modal.vue. (Make sure you do not use a name already used by vue)

Once you have this file created with a template, script and/or (style scoped) (scoped means styles only aplies to this component) 
You need toimport this into App.vue file.

    import Modal from './components/Modal.vue'

You then need to add a componants are int eh export default array.

    export default {
        name: 'App',
        components: {
           Modal
        },
    }

To make this appear in the website add it to the template as well.

    <template>
        <div>
            <Modal />
        </div>
    </template>

Make sure you use the correct name as used in import line.

Props in vue

Passing data between components using props 

To add a prop you can pass a vlue in the template declaration of a component

    App.vue 
    <template>
        <div>
            <Modal header="sign up fo the Giveaway" text="Grab your Ninja Swag for Half Price"/>
        </div>
    </template>

In the Modal.vue file you need to add it in the export default array.

    Modal.vue
    export default {
        props: ['header', 'text']
    }

and now you can use it within the Modal.vue componant template.

    Modal.vue
    <template>
        <div class="backdrop">
            <div class="modal">
                <h1>{{ header }}</h1>
                <p>{{ text }}</p>
            </div>
        </div>
    </template>

You can also bind the values to make it look and read better .

    App.vue
    export default {
        data() {
            return {
            title: "My First Vue App",
            header: "sign up fo the Giveaway",
            text: "Grab your Ninja Swag for Half Price"
            }
        },
    
    <template>
        <div>
            <Modal :header="header" :text="text"/>
        </div>
    </template>

Emmiting Custom Events

You can add an emit from a child component to the parent component by creating
an emit event int he child component

    Modal.vue
    <template>
        <div class="backdrop" @click.self="closeModal">
            <div class="modal" :class="{ sale: theme === 'sale'}">
                <h1>{{ header }}</h1>
                <p>{{ text }}</p>
            </div>
        </div>
    </template>

    <script>

    export default {
        props: ['header', 'text', 'theme'],
        methods: {
            closeModal() {
                this.$emit('close')
            }
        }
    }
    </script>

    (notes @click.self means that the event only refers to that element and any
    elemtns inside will have no effect.)

In the parent component you need to listen out for the emmited value.

    App.vue (Template area)
    <div v-if="showModal" >
        <Modal :header="header" :text="text" theme="sale" @close="toggleModal"/>
    </div>

the @close is the value set in $emit() from the child component

This wil now run the method toggleModal in the app.vue file.

Slots in vue

This is an alternative to Props.

To declare slots you need to put within the Modal tags the data you want to show.

    App.vue (Template area)
    <Modal theme="sale" @close="toggleModal">
        <template v-slot:links>
        <a href="#">Sign Up now</a>
        <a href="#">More Info</a>
        </template>

        <h1>Ninja Giveaway!</h1>
        <p>Grb Your Ninja Swah for HALF PRICE!</p>
    </Modal>

You can have named slots by using v-slots:name or without will fill any 
area wih at <slot></slot> tags

    Modal.vue (template area )
    <slot></slot>
    <div class='acions'>
        <slot name="links"></slot>
    </div>


Teleport

Teleport is when you want to pass a component and area in index.html outside 
<div id="app"></div> area.

To do this you need to convert the required objects 
from <div></div> to <teleport></teleport>

    in index,php
    <div id="app"></div>
    <!-- built files will be auto injected -->
    <div class="modals"></div>

    in App.vue 
    <teleport to=".modals" v-if="showModal" >
        <Modal theme="sale" @close="toggleModal">
            <template v-slot:links>
              <a href="#">Sign Up now</a>
              <a href="#">More Info</a>
            </template>
  
            <h1>Ninja Giveaway!</h1>
            <p>Grb Your Ninja Swah for HALF PRICE!</p>
        </Modal>
      </teleport>

      You will also need to update the css to add the styles to the new div. 
      <style>
        #app, .modals {
          font-family: Avenir, Helvetica, Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
          text-align: center;
          color: #2c3e50;
          margin-top: 60px;
        }
        </style>

you can add it ad an id as well. but must update css to #modals


Hooks used in the export default {} 

Mounted is a response when this component is loaded ou can run a seperate script
    mounted() {
        console.log('component mounted')
        setTimeout(() => {
            this.showBlock = true
            console.log(this.delay)
        }, this.delay)
    },

Updated will validate and run once the component has been updated
    updated() {
        console.log('component updated')
    },

Unmounted is where you can run a script/function whn the component has been
closed down.
    unmounted() {
        console.log("Unmounted component")
    }