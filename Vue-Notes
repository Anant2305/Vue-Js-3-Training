Vue Js with Firebase

Course link - https://www.udemy.com/course/build-web-apps-with-vuejs-firebase

Tutors Git hub - https://github.com/iamshaunjp/Vue-3-Firebase
Installing Dependancies - https://github.com/iamshaunjp/Vue-3-Firebase/blob/Installing-Dependencies/README.md

IDE - Visual Studio Code

Downloaded Extensions
    -Live Sever
    -Veture
    -Material Design Icon

Projects Created

Introdction
    vue-firbase

Vue Cli
    modal-projects

    reaction-timer (prop, emit)
    web-forms - (Foms set up and submission)
    ninja-jobs (Routing)
    project-planner (Routing)

Composition API
    dojo-blog 

********************************************

    You can use Vuejs 2 ways

    using it via Vuejs website: -
        <script src="https://unpkg.com/vue@3"></script>

    Downloading it locally
        npm init vue@latest

To create a vuejs to work you need to create a vue app.js file to keep all the files together and add: -

    const app = Vue.createApp()

You will need to create a mount to be able to add to the website

    app.mount("#app")

Once this has been delcared you are now able to use this in any html page
within a <div></div> tag.
    
    <div id="app" >
    </div>

Anything within this div you can use VueJS code.

You are now able to add templates to the Vue.createApp() for it to be processedin the <div id="app"></div> element
    
    const app = Vue.createApp({
        //data, function
        template: '<h2>I am the template<h2>'
    })

Adding data that is accessible to the webpage
    
    data(){
        return {
            title: 'The Final Empire',
            author: 'Brandon Snaderson',
            age: 45,
        }
    }

within the createApp() object you can add data that can be used in the webpage
    <p>{{ title }} - {{ author }} - {{ age }}</p>


DIRECTIVES

These are Vejs function that will respond to a users action

Like a button click:-

There are 2 ways to create a button response

1 - On the webpage
    <button v-on:click='age++'>increase age by 1</button>
    <button v-on:click='age--'>decrease age by 1</button>

    the v is to say this is a vue command
    the on is the action
    the click the the response when action is done
    
    Vuejs has made it simple to create this by changing v-on to @
    so the above can now be

         <button @click='age++'>increase age by 1</button>
         <button @click='age--'>decrease age by 1</button>
2 - With in the createApp()

    methods: {
        changeTitle() {
            this.title = "New Title Name"
        }
    }

    you can refer to this in the webpage as
        <div @click="changeTitle">Change Book Title</div>

    To make this dynamic you can pass a value to change the book to
        <div @click="changeTitle2('OtherTitle')">Change Book Title</div>
    
    and in the method pass the value as a variable
         methods: {
           changeTitle() {
            this.title = "New Title Name"
           }
         }


Using an if statement

You can use v-if to validate if something should be shown or not
You need to set a value in the data to validate and then check in the website like so

    <div v-if="showBooks"></div>

You can also use this in a button by adding a method to toggle a value to show and hide a button
    in app.js
    data(){
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Snaderson',
            age: 45,
        }
    },
    methods: {
        toggleShowBooks(){
            this.showBooks = !this.showBooks //this will set showBooks toopposite to last clicked value.
        },
    
    in HTML <div id='app'><div> area
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books</span>
        <span  v-else>Show Books</span>
    </button>

Another way to hide and show thing in vuejs is to use v-show
     <div v-show="showBooks">SHOW US VALUE</div>

The way v-if works it removes the whole block and will then inject it back in when to show, but v-show chnges the css to display:block and display:none.

Depending on what you want to do v-if takes longer to switch on and off compared to v-show.
Based on your needs you may want to think about which one to use.

Other Mouse Events

    <!-- Other Mouse Events -->
    <div class="box" @mouseover="handleEvent($event, 5)">mouseover (enter</div>
    <div class="box" @mouseleave="handleEvent">mouseleave</div>
    <div class="box" @dblclick="handleEvent">double click</div>

     handleEvent(e) {
            console.log(e, e.type)
        }
    This will handle mouse specifc actions and return a list of events to vusjs for you to referto and handle.

    You can pass is your own data but must make sure you also send over the event in the first value. ($event).

    You can also delcare the mouse move to return back the position of the mouse int a div.

    <div class="box" @mousemove="handleMouseMove">position - {{ x }} {{ y }}</div>
    data(){
        return {
            x: 0,
            y: 0
        }
    },
    method: {
        handleMouseMove(e){
            this.x = e.offsetX,
            this.y = e.offsetY
        }
    }

Outputting Data

Arrays

WHen you declare an array in the data: -

    data(){
        return {
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss' },
                { title: 'the way of kings', author: 'Brandon Snaderson' },
                { title: 'The Final Empire', author: 'Brandon Snaderson' }
            ]
        }
    },

You can loop through it by using a v-for loop 

    <div v-if="showBooks">
        <ul>
            <li v-for="book in books">
                <h3>{{ book.title }}</h3>
                <p>{{ book.author }}</p>
            </li>
        </ul>
    </div>

This will loop through the books as book and out put the values in title and author.

Attribute Binding

What if you want to create a dynamic data in a an attribute like href.

To use this you need to bo a data binding by using v-bind: and waht to bind with.

    in app.js createApp()
    data(){
        return {
            url: "https://www.bbc.co.uk"
        }
    },

    in Website
    <a v-bind:href="url"> Best website ever</a>
    or
    <a :href="url"> Best website ever</a>

Dynamic Classes

You can change the class name based on a value in the data and using Attribute binding method you can
use in the class adding a class in a data value is what you wnat it to be.

    in app.js createApp() 
     return {
            url: "https://www.bbc.co.uk",
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss', img: 'assets/NameOfWind.jpg', isFav: true },
                { title: 'the way of kings', author: 'Brandon Snaderson', img: 'assets/WayOfKings.jpg', isFav: false },
                { title: 'The Final Empire', author: 'Brandon Snaderson', img: 'assets/finalEmpire.jpg', isFav: true }
            ]
        }

        in website
        <li v-for="book in books" :class="{ fav: book.isFav}">

Thei will add class fav if book.isFav is set to true.

Computed Propertise

This is where you can use the set of array data decalred in createApp(){ data} and filter out any items listed 
under a value you want to filter by,

You need to create a new section called computed in createApp()

    in createApp() data array
     data(){
        return {
            showBooks: true,
            books: [
                { title: 'name of the wind', author: 'patrick rothfuss', img: 'assets/NameOfWind.jpg', isFav: true },
                { title: 'the way of kings', author: 'Brandon Snaderson', img: 'assets/WayOfKings.jpg', isFav: false },
                { title: 'The Final Empire', author: 'Brandon Snaderson', img: 'assets/finalEmpire.jpg', isFav: true }

            ]
        }
    },
    computed: {
        filteredBooks() {
            return this.books.filter((book) =>  book.isFav)
        }
    }

this will filter out any books with isFav as true and return it as anew array to use in website.

    in website
    div v-if="showBooks">
        <ul>
            <li v-for="book in filteredBooks" :class="{ fav: book.isFav}" @click="toggleIsFav(book)">
                <img :src="book.img" :alt="book.title" >
                <h3>{{ book.title }}</h3>
                <p>{{ book.author }}</p>
            </li>
        </ul>
    </div>

*************************************************************

#################  VUE Cli   #################

You can download vue Cli
    npm install -g @vue/cli

This will download all vue clie files needed to create a vue Project

You can now create a new project in the command line:

    vue create modal-project

When you press enter you will be given option to choose from based on what you
require select options

    Vue CLI v5.0.4
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router
    ? Choose a version of Vue.js that you want to start the project with 3.x
    ? Use history mode for router? (Requires proper server setup for index fallback 
    in production) Yes
    ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated confi
    g files
    ? Save this as a preset for future projects? No

This will create a new projet called modal-project

It will ask you to set it up using setting for your project.

The new project will create a budle of Files.
    Node_Modules Folder
    Public Folder
    Src Folder
        assets Folder
        Components Folder
        App.vue 
        main.js 
    Other files

App.vue is where we write all the codes to appear in the main.js which will then
appear in index.js. 

The Vuejs is the main file where we add the createApp data, modules & computed information
as we did in the vue-firbase Projects

The vue js is seperated into 3 areas.

    1 - templae - data added that will appear in the webpage 
    2 - script - the place where we return data, methods & computed proceses for the
        template to use
    3 - Style - CSS we want to use for the webpage.

Template References

You can use references to a dom and handle it in the methods area. 
    <template>
        <input type="text" ref="name">
        <button @click="handleClick">click me</button>
    </template>

    methods: {
        handleClick() {
          console.log(this.$refs.name)
          this.$refs.name.classList.add('active')
            this.$refs.name.focus()
        }
      }

This will output anything in the input box and when button clicked will appear
in the console log and amend the dom accordingly.

Multiple Componenets

In the Components folder you can create different files as long as you use a naming convention
like Modal.vue. (Make sure you do not use a name already used by vue)

Once you have this file created with a template, script and/or (style scoped) (scoped means styles only aplies to this component) 
You need toimport this into App.vue file.

    import Modal from './components/Modal.vue'

You then need to add a componants are int eh export default array.

    export default {
        name: 'App',
        components: {
           Modal
        },
    }

To make this appear in the website add it to the template as well.

    <template>
        <div>
            <Modal />
        </div>
    </template>

Make sure you use the correct name as used in import line.

Props in vue

Passing data between components using props 

To add a prop you can pass a vlue in the template declaration of a component

    App.vue 
    <template>
        <div>
            <Modal header="sign up fo the Giveaway" text="Grab your Ninja Swag for Half Price"/>
        </div>
    </template>

In the Modal.vue file you need to add it in the export default array.

    Modal.vue
    export default {
        props: ['header', 'text']
    }

and now you can use it within the Modal.vue componant template.

    Modal.vue
    <template>
        <div class="backdrop">
            <div class="modal">
                <h1>{{ header }}</h1>
                <p>{{ text }}</p>
            </div>
        </div>
    </template>

You can also bind the values to make it look and read better .

    App.vue
    export default {
        data() {
            return {
            title: "My First Vue App",
            header: "sign up fo the Giveaway",
            text: "Grab your Ninja Swag for Half Price"
            }
        },
    
    <template>
        <div>
            <Modal :header="header" :text="text"/>
        </div>
    </template>

Emmiting Custom Events

You can add an emit from a child component to the parent component by creating
an emit event int he child component

    Modal.vue
    <template>
        <div class="backdrop" @click.self="closeModal">
            <div class="modal" :class="{ sale: theme === 'sale'}">
                <h1>{{ header }}</h1>
                <p>{{ text }}</p>
            </div>
        </div>
    </template>

    <script>

    export default {
        props: ['header', 'text', 'theme'],
        methods: {
            closeModal() {
                this.$emit('close')
            }
        }
    }
    </script>

    (notes @click.self means that the event only refers to that element and any
    elemtns inside will have no effect.)

In the parent component you need to listen out for the emmited value.

    App.vue (Template area)
    <div v-if="showModal" >
        <Modal :header="header" :text="text" theme="sale" @close="toggleModal"/>
    </div>

the @close is the value set in $emit() from the child component

This wil now run the method toggleModal in the app.vue file.

Slots in vue

This is an alternative to Props.

To declare slots you need to put within the Modal tags the data you want to show.

    App.vue (Template area)
    <Modal theme="sale" @close="toggleModal">
        <template v-slot:links>
        <a href="#">Sign Up now</a>
        <a href="#">More Info</a>
        </template>

        <h1>Ninja Giveaway!</h1>
        <p>Grb Your Ninja Swah for HALF PRICE!</p>
    </Modal>

You can have named slots by using v-slots:name or without will fill any 
area wih at <slot></slot> tags

    Modal.vue (template area )
    <slot></slot>
    <div class='acions'>
        <slot name="links"></slot>
    </div>


Teleport

Teleport is when you want to pass a component and area in index.html outside 
<div id="app"></div> area.

To do this you need to convert the required objects 
from <div></div> to <teleport></teleport>

    in index,php
    <div id="app"></div>
    <!-- built files will be auto injected -->
    <div class="modals"></div>

    in App.vue 
    <teleport to=".modals" v-if="showModal" >
        <Modal theme="sale" @close="toggleModal">
            <template v-slot:links>
              <a href="#">Sign Up now</a>
              <a href="#">More Info</a>
            </template>
  
            <h1>Ninja Giveaway!</h1>
            <p>Grb Your Ninja Swah for HALF PRICE!</p>
        </Modal>
      </teleport>

      You will also need to update the css to add the styles to the new div. 
      <style>
        #app, .modals {
          font-family: Avenir, Helvetica, Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
          text-align: center;
          color: #2c3e50;
          margin-top: 60px;
        }
        </style>

you can add it ad an id as well. but must update css to #modals


Hooks used in the export default {} 

Mounted is a response when this component is loaded ou can run a seperate script
    mounted() {
        console.log('component mounted')
        setTimeout(() => {
            this.showBlock = true
            console.log(this.delay)
        }, this.delay)
    },

Updated will validate and run once the component has been updated
    updated() {
        console.log('component updated')
    },

Unmounted is where you can run a script/function whn the component has been
closed down.
    unmounted() {
        console.log("Unmounted component")
    }


Two Way Binding

You can use v-model in the template to bind to data the values entered by the users
and because its 2 way eny entered data values can be passed to the template area

<template>
    <div>
      <form>
          <label>Email:</label>
          <input type="email" required v-model='email'>
    
          <label>Password:</label>
          <input type="password" required v-model='password'>
    
            <label>Role:</label>
            <select v-model='role'>
                <option value="developer">Web Developer</option>
                <option value="designer">Web Desinger</option>
            </select>
    
        <div class="terms">
            <input type="checkbox" v-model="terms" required>
            <label>Accept terms and conditions</label>
        </div>
    
        <div>
            <input type="checkbox" value="shaun" v-model='names'>
            <label>Shaun</label>
        </div>
    
        <div>
            <input type="checkbox" value="yoshi" v-model='names'>
            <label>Yoshi</label>
        </div>
    
        <div>
            <input type="checkbox" value="mario" v-model='names'>
            <label>Mario</label>
        </div>
    
      </form>
    
      <p>Email: {{ email }}</p>
      <p>Password: {{ password }}</p>
      <p>Role: {{ role }}</p>
      <p>Terms Accepted {{ terms }}</p>
      <p>Names {{ names }}</p>
    
    </div>
    </template>

        export default {
            data() {
                return {
                    email: '',
                    password: '',
                    role: 'designer',
                    terms: false,
                    names: [],
                }
            }
        }

Each v-model can be assigned a value to be set when the page loads by setting 
it up in the data object or it will be set when the user type or uses it.

Checkbox are set up 2 ways 
        1 as a Boolean
        2 as an array

see template and data.

Keyboard Events

In any html tag you can add a @key... to run a function in the methds.

    <input type="text" v-model="tempSkill" @keyup.ctrl="addSkill">

    methods: {
        addSkill(e) {
           if(e.key === ',' && this.tempSkill) {
               if(!this.skills.includes(this.tempSkill)){
                    this.skills.push(this.tempSkill)
               }
               this.tempSkill = ''
           }
        }
    }

The input has been set so when user presses ctrl and and other key in the Keyboard
the addSkill is triggered and will check and process as needed.

There are many keyboard function you can use and run a module.

Handle Form submit

You can prevent a refresh of a form submission to e able to process it in vue by
adding @submit.prevent and you can then add a module function to run it.

    <form @submit.prevent="handleSubmit"></form>

 Vue Router
 
 WHen you want to add a router to a project you need to set this up as part of the create
 process.

        Vue CLI v5.0.4
        ? Please pick a preset: Manually select features
        ? Check the features needed for your project: Babel, Router
        ? Choose a version of Vue.js that you want to start the project with 3.x
        ? Use history mode for router? (Requires proper server setup for index fallback 
        in production) Yes
        ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated confi
        g files
        ? Save this as a preset for future projects? No

When you open the project you will see a new router folder with index.vue.

This index.vue file will list all the views for the project that will now be
in the views folder.

router/index.vue
        import { createRouter, createWebHistory } from 'vue-router'
        import HomeView from '../views/HomeView.vue'
        import About from '../views/About.vue'

        const routes = [
        {
            path: '/',
            name: 'home',
            component: HomeView
        },
        {
            path: '/about',
            name: 'about',
            component: About
        }
        ]

        const router = createRouter({
        history: createWebHistory(process.env.BASE_URL),
        routes
        })

        export default router


In the App.js file you will see <router-link></router-link> tags that wil list all 
you pages. You can bind the link rather that hard code the view paths

    <router-link to="/">Home</router-link> |
    <router-link :to="{ name: 'about' }">About</router-link>

This is just incase the path changes then you would not need to amend every file with
the new path becasue the name will still be the same.

When you want to view a details page of a perticular detials page you can set this up in the 
router->index.vue page using a :id 

router->index.vue
            {
                path: '/jobs/:id',
                name: 'JobDetails',
                component: JobDetails
            }
And in the view page Here JObDetails.vue

You can call $route to get all the route data and in there will be .params and then
the vlaue you want to see .id

jobDetails.vue
            <template>
                <p>The Job id is {{ $route.params.id }}</p>
            </template>

or this can be stored in the data() object 

jobDetails.vue
            <template>
                <p>The Job id is {{ id }}</p>
            </template>

            export default {
                data() {
                    return {
                        id: this.$route.params.id
                    }
                }
            }

You can then set up the page that you want to poitn to this page using its own
list of ids to pass.

Jobs.vue ( list of jobs will be clicked and show the jobDetails.vue page based on the id)

    <template>
        <div>
        <h1>Jobs</h1>
        <div v-for="job in jobs" :key="job.id">
            <router-link :to="{ name: 'JobDetails', params:{ id: job.id }}">
                <h2>{{ job.title }}</h2>
            </router-link>
        </div>
        </div>
    </template>

    export default {
        data() {
            return {
                jobs: [
                    {title: 'Ninja UX Designer', id: 1, details: 'lorem'},
                    {title: 'Ninja Web Developer', id: 2, details: 'lorem'},
                    {title: 'Ninja Vue Developer', id: 3, details: 'lorem'}
                ]
            }
        }
    }

Adding A Redirect

In router->index.vue you can add a redirect action in the routes array
to point an old path to the new one.

    router->index.vue
    routes = [
      {
        path: '/jobs',
        name: 'jobs',
        component: Jobs
      },
      {
        path: '/all-jobs',
        redirect: '/jobs'
      }
    ]
    
    404 page

You can also set up a 404 page not found in the router->index.vue file by adding path ;/:catachAll(.*))
You can then add it to run a page you have acreated in the views folder and import it in.

    // Cathc All 404
    {
        path: '/:catchAll(.*)',
        name: 'NotFound',
        component: NotFound
    }

Programatical Navigation

The Router function stores the history of the pages you have been on in the site.

and can use this functioanlity to assign to button to utilise this feature.

You can assign buttons to help the user navigate to previous pages as well as 
navigate forward. You can assign a button to redirect to another page by assigning
these in the App.vue module 

App.vue
    template
        <button @click="redirect">Redirect</button>
        <button @click="back">Go Back</button>
        <button @click="forward">Go Forward</button>
        <router-view/>

    script
        export default ({
            methods: {
            redirect() {
                this.$router.push({name: 'home' })
            },
            back() {
                this.$router.go(-1)
            },
            forward() {
                this.$router.go(1)
            }
            }
        })

You can assign any number of pages in the go() object.

Lazy Loading

You can lazy load a page only when it has been clicked by only importing it when 
it has been clicked by the user.

router->index.vue
    router = [
        {
            path: '/',
            name: 'home',
            component: HomeView
        },
        {
            path: '/about',
            name: 'about',
            component: () => import('../views/AboutView.vue')
        },
        {
            path: '/jobs',
            name: 'jobs',
            component: Jobs
        }
    ]

Using JSON Data 

You can create an nternal DB by using a file to store json data.

Create a new folder called data and a file called db.json

You can load json-server to monitor this file to GET, POST, PUSH & DELETE data to.

in Terminal for the project
        npm install json-server.

When this is called you can use it to commicate with the data file by telling
the json-server to watch this file. 

in Terminal for the project
        json-server --watch data/db.json

You can refer to this in you vue project.


Fetch Data (Using db.js)

When you create a db.js to store data you can use this as and when you load a pages
and mount it.

db.js
    {
        "jobs": [
                {"title": "Ninja UX Designer", "id": 1, "details": "lorem"},
                {"title": "Ninja Web Developer", "id": 2, "details": "lorem"},
                {"title": "Ninja Vue Developer", "id": 3, "details": "lorem"},
                {"title": "Ninja PHP Developer", "id": 4, "details": "lorem"}

        ]
    }

Jobs.vue
    <template>
        <div>
        <h1>Jobs</h1>
        <div v-if="jobs.length">
            <div v-for="job in jobs" :key="job.id" class='jobs'>
                <router-link :to="{ name: 'JobDetails', params:{ id: job.id }}">
                    <h2>{{ job.title }}</h2>
                </router-link>
            </div>
        </div>
        <div v-else>
        <p>Loading Jobs............</p>
        </div>
        </div>
    </template>
    export default {
        data() {
            return {
                jobs: []
            }
        },
        mounted() {
            fetch(' http://localhost:3000/jobs')
                .then(res => res.json())
                .then(data => this.jobs = data)
                .catch(err => console.log(err.message))
        }
    }

JobDetails.vue (to get data for one of the ids to view)
        <template>
            <div v-if="job">
            <h1>{{ job.title }}</h1>
            <p>The Job id is {{ id }}</p>
            <p>{{ job.details}}</p>
            </div>
            <div v-else>
            <p>Loading Job Details............</p>
            </div>
        </template>
        export default {
            props: ['id'],
            data() {
                return {
                    job: null
                }
            },
            mounted() {
            fetch(' http://localhost:3000/jobs/' + this.id)
                    .then(res => res.json())
                    .then(data => this.job = data)
                    .catch(err => console.log(err.message))
            }
        }
This is now stored in db.jsonfile. 

***************** Composition API ******************

In view now ou have an additions export default function called setup(){}.

All the data, methods, Computed and hooks can now be created in the setup function.

The benefit of using composition API over old way is that you are able to organise 
you code better and reuse the code.

Setup will always be ran first before Created and mounted.

You can create the setup and return the value, but these values are not changable 
initially.

        <!-- <template>
            <div class="home">
            <p>My Name is {{ name }} and my age is {{ age }}</p>
            <button @click="handleClick">click me</button>
            </div>
        </template>
        
        <script>
        export default {
            name: 'HomeView',
            setup() {
            console.log('setup')
        
            let name = 'mario'
            let age = 30
        
            const handleClick = () => {
                console.log('you clicked me')
            }
        
            return { name, age, handleClick}
            }
        }
        </script> -->

In the setup you care able to create functions to use int he template, 
but must be part of the returned values.

To amend the template objects you need to use Vue's ref feature by importing it and
creating a const to use it with.

    <!-- <template>
        <div class="home">
        <p ref="p">My Name is {{ name }} and my age is {{ age }}</p>
        <button @click="handleClick">click me</button>
        </div>
    </template>
    
    <script>
    import { ref } from 'vue'
    export default {
        name: 'HomeView',
        setup() {
        console.log(this)
    
        const p = ref(null)
    
        let name = 'mario'
        let age = 30
    
        const handleClick = () => {
            console.log(p, p.value)
            p.value.classList.add('test')
            p.value.textContent = "hello, Ninjas"
        }
    
        return { name, age, handleClick, p}
        }
    }
    </script> -->

Here the p ref will be assigned to the p tag and when you click the button will 
add a class and change the text content.

Because the set up is run before everything else and also the template you are not
able to make this changes as they will be null as they have not been created.

but works perfectly after page loaded.

To make values in setup reactive and change as an when needed you can assign these as 
ref()

            <!-- <template>
                <div class="home">
                <p ref="p">My Name is {{ name }} and my age is {{ age }}</p>
                <button @click="handleClick">click me</button>
                <button @click="age++">Add 1 age</button>
                <input type="text" v-model="name">
                </div>
            </template>
            
            <script>
            import { ref } from 'vue'
            export default {
                name: 'HomeView',
                setup() {
                    const name = ref('mario')
                    const age = ref(30)
            
                    const handleClick = () => {
                        name.value = "luigi"
                        age.value = 35
                    }

                return { name, age, handleClick }
                }
            }
            </script> -->

Here the values have changed to const which values can be changed and each are now set up as 
ref().

We have assigned ref anmes to a click button to increment age by one and
an imput box to change the name value from the website directly.

You will also notice that unlike before to access the value in template we don not need to
use the full name as its not part of an array value returned and used.

            i.e {{ name.value }} instead just use {{ name }}


There is another way to amend data which is called reactive

        <!-- <template>
            <div class="home">
            <h2>Refs</h2>
            <p>{{ ninjaOne.name}} - {{ ninjaOne.age }}</p>
            <button @click="updateNinjaOne">Update Ninja One</button>
            <h2>Reactive</h2>
            <p>{{ ninjaTwo.name}} - {{ ninjaTwo.age }}</p>
            <button @click="updateNinjaTwo">Update Ninja Two</button>
            </div>
        </template>
        
        <script>
        import { ref, reactive } from 'vue'
        export default {
            name: 'HomeView',
            setup() {
            
            const ninjaOne = ref({ name: 'mario', age: 30 })
            const ninjaTwo = reactive({ name: 'luigi', age: 35})
                
            const updateNinjaOne = () => {
                ninjaOne.value.age = 40
            }
        
            const updateNinjaTwo = () => {
                ninjaTwo.age = 45
            }
        
            return { ninjaOne, updateNinjaOne, ninjaTwo, updateNinjaTwo }
            }
        }
        </script> -->

Here we have introduced reative and how the imputs slightly differ between ref and reactive.
The disadantages about reactive is that it is sometimes un reactive when used as
a singe value i.e ninjaTwo = reactive('mario').

You will not be able to update this value becasue when this go live to the website
it becomes a primative value  and you will not able to use it.

The course will only use Refs.

We can also use computed(), watch, watchEffect, prop and life cycle hooks in the set up.

each one has its own slight changes and can respond accordingly.

the lifecycle hooks are named differently as below as an example

        mounted becomes onMounted
        unMounted becomes onUnMounted
        updated becomes onUpdated

All these are in the below example

<!--
<template>
    <div class="home">
      <h1>Home</h1>
      <p>Search Term = {{ search }}</p>
      <div v-for="name in matchingNames" :key="name">{{ name }}</div>
      <PostList v-if="showPosts" :posts="posts" />
      <button @click="showPosts = !showPosts">Toggle Posts</button>
      <button @click="posts.pop()">Delete a post</button>
    </div>
  </template>
  
  <script>
  import { computed, ref, watch, watchEffect } from 'vue'
  import PostList from '../components/PostList.vue'
  export default {
    name: 'HomeView',
    components: { PostList },
    setup() {
      /* 
        ******* USING COMPUTED, WATCH & WATCHEFFECT *******
      const search = ref('')
      const names = ref(['mario', 'yoshi', 'luigi', 'toad', 'bowser', 'koppa', 'peach'])
  
      watch(search, () => {
        console.log('watch function ran')
      })
  
      watchEffect(() => {
        console.log('watchEffect function ran', search.value)
      })
  
      const matchingNames = computed(() => {
        return names.value.filter((name) => name.includes(search.value))
      })
  
      return { names, search, matchingNames }
      */
  
        /* ********* USING PROPS ************ */
        const posts = ref([
          { title: 'Welcome to the Blog', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc venenatis mi sollicitudin, viverra nunc a, vulputate dolor. Aliquam euismod est id libero condimentum varius. Donec rutrum quam nisl, vitae suscipit urna viverra eget. Nam quis tellus libero. Donec dolor magna, volutpat vitae condimentum eget, fermentum in nunc. Aliquam lobortis porta cursus. Quisque facilisis arcu vel arcu interdum interdum. Interdum et malesuada fames ac ante ipsum primis in faucibus. ', id: 1 },
          { title: 'Top CSS Tips', body: 'Lorem ipsum', id: 2 }
        ])
  
        /* *************** USING LIFECYCLE HOOKS ************ */
        const showPosts = ref(true)

        onMounted(() => console.log('Component mounted'))
        onUnmounted(() => console.log('component unmounted'))
        onUpdated(() => console.log('component updated'))

        return { posts, showPosts }


  
    }
    */
 -->

 You can move all the setup functiona and values into a folder called 
 Composables or Compositions.

 You can create a new folder composables or compositions

 To use Router functionality you will need to.

 Import { useRouter } from 'vue-router'

 and to use this in setup() like below
            const router = useRouter()
            router.push({ name: 'Home'})

You can still use the other function we learned earlier i hte setup area. 

vue-router also had another useful function useRoute which is information about
the page and the params set in the page.

            import { useRoute } from 'vue-router'
            const route = useRoute()
            getPost(route.params.id)

Here we are using the route to search for the id that has been passed to the page.


